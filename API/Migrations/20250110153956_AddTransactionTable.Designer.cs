// <auto-generated />
using System;
using API.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20250110153956_AddTransactionTable")]
    partial class AddTransactionTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("API.Models.Bid", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal?>("BidAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("bid_amount");

                    b.Property<DateTime?>("BidDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("bid_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("BidderId")
                        .HasColumnType("int")
                        .HasColumnName("bidder_id");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BidderId" }, "FK_bidder");

                    b.HasIndex(new[] { "ItemId" }, "FK_item");

                    b.ToTable("bids", (string)null);
                });

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("parent_category_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentCategoryId" }, "FK_parent_category");

                    b.HasIndex(new[] { "CategoryName" }, "category_name")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("API.Models.Item", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BidEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("bid_end_date");

                    b.Property<decimal?>("BidIncrement")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("bid_increment")
                        .HasDefaultValueSql("'0.00'");

                    b.Property<DateTime?>("BidStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("bid_start_date");

                    b.Property<string>("BidStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bid_status")
                        .HasDefaultValueSql("'Active'");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("document_path");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_path");

                    b.Property<decimal?>("MinimumBid")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("minimum_bid");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("seller_id");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "FK_category");

                    b.HasIndex(new[] { "SellerId" }, "FK_seller");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("API.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_read")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "FK_user");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("API.Models.Rating", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int?>("RateeId")
                        .HasColumnType("int")
                        .HasColumnName("ratee_id");

                    b.Property<int?>("RaterId")
                        .HasColumnType("int")
                        .HasColumnName("rater_id");

                    b.Property<int?>("RatingValue")
                        .HasColumnType("int")
                        .HasColumnName("rating_value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RateeId" }, "FK_ratee");

                    b.HasIndex(new[] { "RaterId" }, "FK_rater");

                    b.HasIndex(new[] { "ItemId" }, "FK_rating_item");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("API.Models.Report", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "FK_user")
                        .HasDatabaseName("FK_user1");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("API.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("order_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("credit");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<int?>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<string>("Token")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("API.Models.Bid", b =>
                {
                    b.HasOne("API.Models.User", "Bidder")
                        .WithMany("Bids")
                        .HasForeignKey("BidderId")
                        .HasConstraintName("FK_bidder");

                    b.HasOne("API.Models.Item", "Item")
                        .WithMany("Bids")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_item");

                    b.Navigation("Bidder");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.HasOne("API.Models.Category", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK_parent_category");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("API.Models.Item", b =>
                {
                    b.HasOne("API.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_category");

                    b.HasOne("API.Models.User", "Seller")
                        .WithMany("Items")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK_seller");

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("API.Models.Notification", b =>
                {
                    b.HasOne("API.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.Rating", b =>
                {
                    b.HasOne("API.Models.Item", "Item")
                        .WithMany("Ratings")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_rating_item");

                    b.HasOne("API.Models.User", "Ratee")
                        .WithMany("RatingRatees")
                        .HasForeignKey("RateeId")
                        .HasConstraintName("FK_ratee");

                    b.HasOne("API.Models.User", "Rater")
                        .WithMany("RatingRaters")
                        .HasForeignKey("RaterId")
                        .HasConstraintName("FK_rater");

                    b.Navigation("Item");

                    b.Navigation("Ratee");

                    b.Navigation("Rater");
                });

            modelBuilder.Entity("API.Models.Report", b =>
                {
                    b.HasOne("API.Models.User", null)
                        .WithMany("Reports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("API.Models.Item", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("Items");

                    b.Navigation("Notifications");

                    b.Navigation("RatingRatees");

                    b.Navigation("RatingRaters");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
